#!/usr/bin/env bash

set -o errexit
set -o pipefail
[[ "${DEBUG}" == 'true' ]] && set -o xtrace

declare -g tempDir=''
tempDir="$(mktemp -d)"
function removeTempDir() {
  if [ -d "${tempDir}" ]; then
    rm -rf "${tempDir}"
  fi
}
trap removeTempDir EXIT

function oneTimeSetUp() {
  declare -g s3kScript=''
  s3kScript="$(git rev-parse --show-toplevel)/bin/s3k"
  if [ ! -s "${s3kScript}" ]; then
    fail "No file exists at \"${s3kScript}\" path" >&2
  fi

  declare -g newPackageScript=''
  newPackageScript="$(git rev-parse --show-toplevel)/test/newPackage"
  if [ ! -s "${newPackageScript}" ]; then
    fail "No file exists at \"${newPackageScript}\" path" >&2
  fi

  declare -g _monorepoDir=''
  _monorepoDir="$(git rev-parse --show-toplevel)/test/monorepo"

  "${newPackageScript}" -n bar-core
  "${newPackageScript}" -n bar-api -t
  "${newPackageScript}" -n bar-server -t -b
  "${newPackageScript}" -n bar-client -t

  "${newPackageScript}" -n foo-core
  "${newPackageScript}" -n foo-bar -t
  "${newPackageScript}" -n foo-bar-baz -t -b

  "${newPackageScript}" -n barn -t -b
  "${newPackageScript}" -n fubar -t -b

  (cd "${_monorepoDir}" && "${s3kScript}" -C)
}

function oneTimeTearDown() {
  true #rm -r "${_monorepoDir}"
}

function testFullBuildOnly() {
  cd "${_monorepoDir}"

  assertEquals \
    "full build - regex 'bar' w/ pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks --pedantic bar-api bar-client bar-core bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -b 'bar')"

  assertEquals \
    "full build - regex '^bar' w/ pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks --pedantic bar-api bar-client bar-core bar-server barn' \
    "$("${s3kScript}" -p -b '^bar')"

  assertEquals \
    "full build - regex '^bar-.*' w/ pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks --pedantic bar-api bar-client bar-core bar-server' \
    "$("${s3kScript}" -p -b '^bar-.*')"

  assertEquals \
    "full build - regex 'bar-server|fubar' w/ pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks --pedantic bar-server fubar' \
    "$("${s3kScript}" -p -b 'bar-server|fubar')"

  assertEquals \
    "full build - regex 'bar' w/o pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks bar-api bar-client bar-core bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -W -b 'bar')"

  assertEquals \
    "full build - regex '^bar' w/o pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks bar-api bar-client bar-core bar-server barn' \
    "$("${s3kScript}" -p -W -b '^bar')"

  assertEquals \
    "full build - regex '^bar-.*' w/o pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks bar-api bar-client bar-core bar-server' \
    "$("${s3kScript}" -p -W -b '^bar-.*')"

  assertEquals \
    "full build - regex 'bar-server|fubar' w/o pedantic:" \
    'stack build --test --no-run-tests --bench --no-run-benchmarks bar-server fubar' \
    "$("${s3kScript}" -p -W -b 'bar-server|fubar')"
}

function testBuildOnly() {
  cd "${_monorepoDir}"

  assertEquals \
    "build - regex 'bar' w/ pedantic:" \
    'stack build --pedantic bar-api bar-client bar-core bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -B 'bar')"

  assertEquals \
    "build - regex '^bar' w/ pedantic:" \
    'stack build --pedantic bar-api bar-client bar-core bar-server barn' \
    "$("${s3kScript}" -p -B '^bar')"

  assertEquals \
    "build - regex '^bar-.*' w/ pedantic:" \
    'stack build --pedantic bar-api bar-client bar-core bar-server' \
    "$("${s3kScript}" -p -B '^bar-.*')"

  assertEquals \
    "build - regex 'bar-server|fubar' w/ pedantic:" \
    'stack build --pedantic bar-server fubar' \
    "$("${s3kScript}" -p -B 'bar-server|fubar')"

  assertEquals \
    "build - regex "bar" w/o pedantic:" \
    'stack build bar-api bar-client bar-core bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -W -B 'bar')"

  assertEquals \
    "build - regex '^bar' w/o pedantic:" \
    'stack build bar-api bar-client bar-core bar-server barn' \
    "$("${s3kScript}" -p -W -B '^bar')"

  assertEquals \
    "build - regex '^bar-.*' w/o pedantic:" \
    'stack build bar-api bar-client bar-core bar-server' \
    "$("${s3kScript}" -p -W -B '^bar-.*')"

  assertEquals \
    "build - regex 'bar-server|fubar' w/o pedantic:" \
    'stack build bar-server fubar' \
    "$("${s3kScript}" -p -W -B 'bar-server|fubar')"
}

function testTestOnly() {
  cd "${_monorepoDir}"

  assertEquals \
    "test - regex 'bar' w/ pedantic:" \
    'stack test --pedantic bar-api bar-client bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -t 'bar')"

  assertEquals \
    "test - regex '^bar' w/ pedantic:" \
    'stack test --pedantic bar-api bar-client bar-server barn' \
    "$("${s3kScript}" -p -t '^bar')"

  assertEquals \
    "test - regex '^bar-.*' w/ pedantic:" \
    'stack test --pedantic bar-api bar-client bar-server' \
    "$("${s3kScript}" -p -t '^bar-.*')"

  assertEquals \
    "test - regex 'bar-server|fubar' w/ pedantic:" \
    'stack test --pedantic bar-server fubar' \
    "$("${s3kScript}" -p -t 'bar-server|fubar')"

  assertEquals \
    "test - regex 'bar' w/o pedantic:" \
    'stack test bar-api bar-client bar-server barn foo-bar foo-bar-baz fubar' \
    "$("${s3kScript}" -p -W -t 'bar')"

  assertEquals \
    "test - regex '^bar' w/o pedantic:" \
    'stack test bar-api bar-client bar-server barn' \
    "$("${s3kScript}" -p -W -t '^bar')"

  assertEquals \
    "test - regex '^bar-.*' w/o pedantic:" \
    'stack test bar-api bar-client bar-server' \
    "$("${s3kScript}" -p -W -t '^bar-.*')"

  assertEquals \
    "test - regex 'bar-server|fubar' w/o pedantic:" \
    'stack test bar-server fubar' \
    "$("${s3kScript}" -p -W -t 'bar-server|fubar')"
}

function testRunOnly() {
  true # TODO: Implement me!
}

function testGhciOnly() {
  cd "${_monorepoDir}"

  assertEquals \
    "ghci - regex 'bar-api|bar-client':" \
    'stack ghci bar-api:lib bar-api:test:bar-api-test-suite bar-client:lib bar-client:test:bar-client-test-suite' \
    "$("${s3kScript}" -p -g 'bar-api|bar-client')"

  assertEquals \
    "ghci - regex 'bar-api|bar-client:lib':" \
    'stack ghci bar-api:lib bar-api:test:bar-api-test-suite bar-client:lib' \
    "$("${s3kScript}" -p -g 'bar-api|bar-client:lib')"

  assertEquals \
    "ghci - regex 'bar-api|bar-client:lib, pedantic flag has no effect':" \
    'stack ghci bar-api:lib bar-api:test:bar-api-test-suite bar-client:lib' \
    "$("${s3kScript}" -p -W -g 'bar-api|bar-client:lib')"
}

function usage() {
  cat <<EOF
s3kTests - Test suite for 's3k'

USAGE
  s3kTests [OPTIONS]

OPTIONS
  -m           Generate the test suite's monorepo but do not run tests
  -h           Show help
EOF
}

function findJqOrDie() {
  local _jq=''
  if [ -x "${S3K_PATH_JQ}" ]; then
    _jq="${S3K_PATH_JQ}"
  elif command -v 'jq' &>/dev/null; then
    _jq='jq'
  else
    echo "s3kTests: 'jq' binary not found on runtime path or S3K_PATH_JQ" >&2
    exit 1
  fi

  echo "${_jq}"
}

function parseArgs() {
  local _jq="$1"
  shift 1

  local OPTARG
  local OPTIND
  local _opt

  local _genMonorepoOnly='false'
  local _showUsage='false'

  while getopts mh _opt; do
    case "${_opt}" in
      m)
        _genMonorepoOnly='true';;
      h)
        _showUsage='true';;
      \?)
        usage >&2
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  "${_jq}" -nS \
    --argjson genMonorepoOnly "${_genMonorepoOnly}" \
    --argjson showUsage "${_showUsage}" '{
        genMonorepoOnly: $genMonorepoOnly,
        showUsage: $showUsage
      }'
}

function shouldShowUsage() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.showUsage' > /dev/null <<< "${_opts}"
}

function showUsage() {
  usage
  exit 0
}

function shouldGenMonorepoOnly() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.genMonorepoOnly' > /dev/null <<< "${_opts}"
}

function genMonorepoOnly() {
  oneTimeSetUp
  exit 0
}

function main() {
  local _jq
  _jq="$(findJqOrDie)"

  local _opts
  _opts="$(parseArgs "${_jq}" "$@")"

  shouldShowUsage "${_jq}" "${_opts}" \
    && showUsage
  shouldGenMonorepoOnly "${_jq}" "${_opts}" \
    && genMonorepoOnly

  # We download 'shunit2' to a temporary directory that is deleted on exit
  # rather than copy 'shunit2' into the 's3k' repo.
  curl -sLo "${tempDir}/shunit2-2.1.8.tar.gz" \
    https://github.com/kward/shunit2/archive/refs/tags/v2.1.8.tar.gz
  tar xf "${tempDir}/shunit2-2.1.8.tar.gz" \
    -C "${tempDir}" --strip-components 1 shunit2-2.1.8/shunit2
  source "${tempDir}/shunit2"
}

main "$@"
