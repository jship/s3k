#!/usr/bin/env bash

set -o errexit
set -o pipefail
[[ "${DEBUG}" == 'true' ]] && set -o xtrace

declare -r version='0.0.0'

function usage() {
  cat <<EOF
s3k ${version} - Do more with 'stack' by typing less!

USAGE
  s3k [OPTIONS] [--] [ARGS]

OPTIONS
  -p           Print the final command rather than executing it
  -b REGEX     Select build target(s) via extended regex
  -B REGEX     Same as '-b' but tests and benchmarks are not built
  -t REGEX     Select test target(s) via extended regex
  -T ARGS      Test arguments
                 (be sure to quote ARGS, e.g. -T '--match Foo')
  -r REGEX     Select run target(s) via extended regex
  -R ARGS      Run arguments
                 (be sure to quote ARGS, e.g. -R '-i foo.txt -o bar.txt')
  -g REGEX     Select GHCi target(s) via extended regex
  -G ARGS      GHCi options
                 (be sure to quote ARGS, e.g. -G '-Wno-missing-home-modules')
  -k WORD      Select haddock target(s) via extended regex
  -K ARGS      Haddock arguments
                 (be sure to quote ARGS, e.g. -K '--html --pretty-html')
  -m REGEX     Select benchmark target(s) via extended regex
  -M ARGS      Benchmark arguments
                 (be sure to quote ARGS, e.g. -M '--match pattern Foo')
  -l ALIAS     Load a project-specific command via alias
  -s ALIAS     Save the final command to a project-specific alias
  -e KEY=VAL   Register a project-specific environment variable
                 (this option may be specified multiple times)
  -E KEY       Unregister a project-specific environment variable
                 (this option may be specified multiple times)
  -W           Build without '--pedantic' flag
  -x CMD       Execute an arbitrary command if the generated command succeeds
                 (be sure to quote CMD)
  -C           Regenerate cached project info
  -V           Print version
  -h           Show help
  -H           Show verbose help

ARGS
  <STACK_ARG>  Additional arguments to pass to 'stack'

               Note that these args are passed to all 'stack'
               invocations in a generated command, not including
               possible 'stack' invocations specified directly by the
               user via '-x' or '-X'. A generated command will have
               multiple 'stack' invocations if at least two of the
               following options are present:

               -b, -B, -t, -r, -g, -k, -m

               Considering the above warning, it is typically only
               useful to supply STACK_ARG arguments when lasering in
               on a specific task with 's3k', whether that task is
               building, testing, running a binary, etc.

               If 's3k' is invoked with only STACK_ARG arguments and no
               options, then 's3k' is effectively a pass-through wrapper
               around 'stack' itself with a name that is two characters
               shorter.
EOF
}

function detailedUsage() {
  usage
  cat <<EOF

DETAILS

This script is a wrapper around 'stack'. STUB.

EXAMPLES

View the script's help:
$ s3k -h
EOF
}

function findJqOrDie() {
  local _jq=''
  if [ -x "${S3K_PATH_JQ}" ]; then
    _jq="${S3K_PATH_JQ}"
  elif command -v 'jq' &>/dev/null; then
    _jq='jq'
  else
    echo "s3k: 'jq' binary not found on runtime path or S3K_PATH_JQ" >&2
    exit 1
  fi

  echo "${_jq}"
}

function findStackOrDie() {
  local _stack=''
  if [ -x "${S3K_PATH_STACK}" ]; then
    _stack="${S3K_PATH_STACK}"
  elif command -v 'stack' &>/dev/null; then
    _stack='stack'
  else
    echo "s3k: 'stack' binary not found on runtime path or S3K_PATH_STACK" >&2
    exit 1
  fi

  echo "${_stack}"
}

# $1: Path to 'jq'
function parseArgs() {
  local _jq="$1"
  shift 1

  local OPTARG
  local OPTIND
  local _opt

  local _behavior='execute'
  local _fullBuildTargetRegex=''
  local _buildTargetRegex=''
  local _testTargetRegex=''
  local _testArgs=''
  local _runTargetRegex=''
  local _runArgs=''
  local _ghciTargetRegex=''
  local _ghciArgs=''
  local _haddockTargetRegex=''
  local _haddockArgs=''
  local _benchmarkTargetRegex=''
  local _benchmarkArgs=''
  local _loadAlias=''
  local _saveAlias=''
  local _envVarsToRegister=()
  local _envVarsToUnregister=()
  local _buildWithPedanticFlag='true'
  local _arbitraryCommand=''
  local _regenProjectCache='false'
  local _printVersion='false'

  while getopts pb:B:t:T:r:R:g:G:k:K:m:M:l:s:e:E:Wx:CVhH _opt; do
    case "${_opt}" in
      p)
        _behavior='print';;
      b)
        _fullBuildTargetRegex="${OPTARG}";;
      B)
        _buildTargetRegex="${OPTARG}";;
      t)
        _testTargetRegex="${OPTARG}";;
      T)
        _testArgs="${OPTARG}";;
      r)
        _runTargetRegex="${OPTARG}";;
      R)
        _runArgs="${OPTARG}";;
      g)
        _ghciTargetRegex="${OPTARG}";;
      G)
        _ghciArgs="${OPTARG}";;
      k)
        _haddockTargetRegex="${OPTARG}";;
      K)
        _haddockArgs="${OPTARG}";;
      m)
        _benchmarkTargetRegex="${OPTARG}";;
      M)
        _benchmarkArgs="${OPTARG}";;
      l)
        _loadAlias="${OPTARG}";;
      s)
        _saveAlias="${OPTARG}";;
      e)
        _envVarsToRegister+=("${OPTARG}");;
      E)
        _envVarsToUnregister+=("${OPTARG}");;
      W)
        _buildWithPedanticFlag='false';;
      x)
        _arbitraryCommand="${OPTARG}";;
      C)
        _regenProjectCache='true';;
      V)
        _printVersion='true';;
      h)
        usage
        exit 0
        ;;
      H)
        detailedUsage
        exit 0
        ;;
      \?)
        usage >&2
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ -z "${_testTargetRegex}" ] && [ -n "${_testArgs}" ]; then
    _testArgs=''
  fi

  if [ -z "${_runTargetRegex}" ] && [ -n "${_runArgs}" ]; then
    _runArgs=''
  fi

  if [ -z "${_ghciTargetRegex}" ] && [ -n "${_ghciArgs}" ]; then
    _ghciArgs=''
  fi

  if [ -z "${_haddockTargetRegex}" ] && [ -n "${_haddockArgs}" ]; then
    _haddockArgs=''
  fi

  if [ -z "${_benchmarkTargetRegex}" ] && [ -n "${_benchmarkArgs}" ]; then
    _benchmarkArgs=''
  fi

  local _envVarsToRegisterJSON='[]'
  if [ "${#_envVarsToRegister[@]}" -gt 0 ]; then
    _envVarsToRegisterJSON=$( \
      printf '%s\n' "${_envVarsToRegister[@]}" | "$(findJqOrDie)" -nR \
        '[ inputs
         | split("=")
         | { key: .[0]
           , value: .[1:] | join("")
           }
         | select(
             (.key | test("^[A-Za-z][A-Za-z0-9_]*$")) and (.value | length > 0)
           )
         ]'
    )
  fi

  local _envVarsToUnregisterJSON='[]'
  if [ "${#_envVarsToUnregister[@]}" -gt 0 ]; then
    _envVarsToUnregisterJSON=$( \
      printf '%s\n' "${_envVarsToUnregister[@]}" | jq -nR \
        '[ inputs
         | select(test("^[A-Za-z][A-Za-z0-9_]*$"))
         | { key: . }
         ]'
    )
  fi

  local _stackArgsJSON='[]'
  if [ "$#" -gt 0 ]; then
    _stackArgsJSON=$( \
      printf '%s\n' "$@" | jq -nR \
       '[ inputs
        | select(test("^\\s*$") | not)
        ]'
    )
  fi

  # We disable SC2016 because it is spuriously detected due to us using a
  # variable for the path to 'jq' rather than using 'jq' directly.
  # shellcheck disable=SC2016
  "${_jq}" -nS \
    --arg behavior "${_behavior}"  \
    --arg fullBuildTargetRegex "${_fullBuildTargetRegex}" \
    --arg buildTargetRegex "${_buildTargetRegex}" \
    --arg testTargetRegex "${_testTargetRegex}" \
    --arg testArgs "${_testArgs}" \
    --arg runTargetRegex "${_runTargetRegex}" \
    --arg runArgs "${_runArgs}" \
    --arg ghciTargetRegex "${_ghciTargetRegex}" \
    --arg ghciArgs "${_ghciArgs}" \
    --arg haddockTargetRegex "${_haddockTargetRegex}" \
    --arg haddockArgs "${_haddockArgs}" \
    --arg benchmarkTargetRegex "${_benchmarkTargetRegex}" \
    --arg benchmarkArgs "${_benchmarkArgs}" \
    --arg loadAlias "${_loadAlias}" \
    --arg saveAlias "${_saveAlias}" \
    --argjson envVarsToRegister "${_envVarsToRegisterJSON}" \
    --argjson envVarsToUnregister "${_envVarsToUnregisterJSON}" \
    --argjson buildWithPedanticFlag "${_buildWithPedanticFlag}" \
    --arg arbitraryCommand "${_arbitraryCommand}" \
    --argjson regenProjectCache "${_regenProjectCache}" \
    --argjson printVersion "${_printVersion}" \
    --argjson stackArgs "${_stackArgsJSON}" \
    ' def nullIfEmptyString: if . == "" then null else . end;
      def emptyArrayIfEmptyString: if . == "" then [] else [.] end;
      .behavior |= $behavior
    | .fullBuildTargetRegex |= ($fullBuildTargetRegex | emptyArrayIfEmptyString)
    | .buildTargetRegex |= ($buildTargetRegex | emptyArrayIfEmptyString)
    | .testTargetRegex |= ($testTargetRegex | emptyArrayIfEmptyString)
    | .testArgs |= ($testArgs | emptyArrayIfEmptyString)
    | .runTargetRegex |= ($runTargetRegex | emptyArrayIfEmptyString)
    | .runArgs |= ($runArgs | emptyArrayIfEmptyString)
    | .ghciTargetRegex |= ($ghciTargetRegex | emptyArrayIfEmptyString)
    | .ghciArgs |= ($ghciArgs | emptyArrayIfEmptyString)
    | .haddockTargetRegex |= ($haddockTargetRegex | emptyArrayIfEmptyString)
    | .haddockArgs |= ($haddockArgs | emptyArrayIfEmptyString)
    | .benchmarkTargetRegex |= ($benchmarkTargetRegex | emptyArrayIfEmptyString)
    | .benchmarkArgs |= ($benchmarkArgs | emptyArrayIfEmptyString)
    | .loadAlias |= ($loadAlias | nullIfEmptyString)
    | .saveAlias |= ($saveAlias | nullIfEmptyString)
    | .envVarsToRegister |= $envVarsToRegister
    | .envVarsToUnregister |= $envVarsToUnregister
    | .buildWithPedanticFlag |= $buildWithPedanticFlag
    | .arbitraryCommand |= ($arbitraryCommand | emptyArrayIfEmptyString)
    | .regenProjectCache |= $regenProjectCache
    | .printVersion |= $printVersion
    | .stackArgs |= $stackArgs
    '
}

function shouldPrintVersion() {
  return 1
}

function printVersion() {
  echo "${version}"
  exit 0
}

function initConfigFile() {
  return 0
}

shouldRegenerateProjectCache() {
  return 1
}

function initProjectCache() {
  return 0
}

function regenerateProjectCache() {
  echo "updating project cache!"
  return 0
}

function shouldSaveAlias() {
  return 1
}

function saveAlias() {
  echo "adding alias!"
  return 0
}

function shouldLoadAlias() {
  return 1
}

function loadAlias() {
  echo "loading alias!"
  return 0
}

function processCommandList() {
  return 0
}

function main() {
  local _jq
  _jq="$(findJqOrDie)"

  local _stack
  _stack="$(findStackOrDie)"

  local _projectRoot
  _projectRoot="$("${_stack}" path --project-root 2>/dev/null)"

  local _opts
  _opts=$(parseArgs "${_jq}" "$@")

  shouldPrintVersion && printVersion

  initProjectCache
  shouldRegenerateProjectCache && regenerateProjectCache

  initConfigFile
  shouldLoadAlias && loadAlias
  shouldSaveAlias && saveAlias

  processCommandList

  echo "${_opts}" | jq
}

main "$@"
