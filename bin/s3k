#!/usr/bin/env bash
# shellcheck disable=SC2016

set -o errexit
set -o pipefail
[[ "${DEBUG}" == 'true' ]] && set -o xtrace

declare -g tempDir=''
tempDir="$(mktemp -d)"
function removeTempDir() {
  if [ -d "${tempDir}" ]; then
    rm -rf "${tempDir}"
  fi
}
trap removeTempDir EXIT

declare -r version='0.0.1'

function usage() {
  cat <<EOF
s3k ${version} - Do more with 'stack' by typing less!

USAGE
  s3k [OPTIONS] [-- [STACK_ARG...]]

OPTIONS
  -p           Print the final command rather than executing it
  -b REGEX     Select packages to build via extended regex
  -B REGEX     Same as '-b' but tests and benchmarks are not built
  -t REGEX     Select packages to test via extended regex
  -T ARGS      Test arguments
                 (be sure to quote ARGS, e.g. -T '--match Foo')
  -r REGEX     Select executables to run via extended regex
  -R ARGS      Run arguments
                 (be sure to quote ARGS, e.g. -R '-i foo.txt -o bar.txt')
  -g REGEX     Select GHCi target(s) via extended regex
  -G ARGS      GHCi options
                 (be sure to quote ARGS, e.g. -G '-Wno-missing-home-modules')
  -k WORD      Select packages to generate haddocks via extended regex
  -K ARGS      Haddock arguments
                 (be sure to quote ARGS, e.g. -K '--html --pretty-html')
  -m REGEX     Select packages to benchmark via extended regex
  -M ARGS      Benchmark arguments
                 (be sure to quote ARGS, e.g. -M '--match pattern Foo')
  -a ALIAS     Load a command via alias
                 (this option may be specified multiple times)
  -s ALIAS     Save the invocation to a project-specific alias
  -S ALIAS     Save the invocation to a global alias
  -l           List project-specific aliases
  -L           List project-specific and global aliases
  -d ALIAS     Delete a project-specific alias
  -D ALIAS     Delete a global alias
  -e KEY=VAL   Use an environment variable in the final command
                 (this option may be specified multiple times)
  -W           Build without '--pedantic' flag
  -x CMD       Execute an arbitrary command if the generated command succeeds
                 (be sure to quote CMD)
  -c           Print path to config file
  -C           Regenerate cached project info
  -V           Print version
  -h           Show help
  -H           Show verbose help

ARGS
  <STACK_ARG>  Additional arguments to pass to 'stack'

               Note that these args are passed to all 'stack' invocations in a
               generated command, not including possible 'stack' invocations
               specified directly by the user via '-x'. A generated command will
               have multiple 'stack' invocations if at least two of the
               following options are present:

               -b, -B, -t, -r, -g, -k, -m

               Considering the above warning, it is typically only useful to
               supply STACK_ARG arguments when lasering in on a specific task
               with 's3k', whether that task is building, testing, running a
               binary, etc or to pass args like '--stack-yaml'.

               If 's3k' is invoked with only STACK_ARG arguments and no options,
               then 's3k' is effectively a pass-through wrapper around 'stack'
               itself with a name that is two characters shorter.
EOF
}

function detailedUsage() {
  usage
  cat <<'EOF'

ENVIRONMENT

's3k' respects the following environment variables:

* S3K_CONFIG_HOME
* S3K_PATH_JQ
* S3K_PATH_STACK

Aliasing commands is driven by a config file. By default, this config file will
be at "${XDG_CONFIG_HOME}/s3k/config.json" if the 'XDG_CONFIG_HOME' environment
variable is populated. Otherwise, the config file will be at
"${HOME}/.s3k/config.json". The user is free to override the directory in which
's3k' will write its config file via the 'S3K_CONFIG_HOME' environment variable.

Outside of (mostly) standard *nix utilities like 'awk', 'cut', 'sort', and
friends, 's3k' does not assume the binaries it leverages - namely 'jq' and
'stack' - exist on the user's runtime path. 's3k' looks for these binaries first
by checking if the binary's path is specified in the appropriate environment
variable ('S3K_PATH_JQ' and 'S3K_PATH_STACK'), and if not, falling back to using
the binary on the user's runtime path if available. 's3k' requires these
binaries, so if the script is unable to find themm, it will error out.

EXAMPLES

View script's help:
$ s3k -h

Build packages with names containing 'foo':
$ s3k -b foo

Print invocation to build packages with names containing 'foo':
$ s3k -b foo -p

Test packages containing the whole word 'foo':
$ s3k -t '\<foo\>'

Build and then run binary named 'foo-server':
$ s3k -r 'foo-server'

Run GHCi with lib targets from packages with 'foo' or 'bar' prefixes:
$ s3k -g '^(foo|bar).*:lib'

Alias running GHCi with lib targets from packages with 'foo' or 'bar' prefixes:
$ s3k -g '^(foo|bar).*:lib*' -s ghci-foo-bar -p

Run GHCi via the alias created in the previous example:
$ s3k -a ghci-foo-bar

Run ghcid using the previous example's alias as input:
$ ghcid --command "$(s3k -a ghci-foo-bar -p)"

Save the previous command to an alias:
$ s3k -x 'ghcid --command "$(s3k -a ghci-foo-bar -p)"' -s ghcid-foo-bar -p

Run ghcid via the alias created in the previous example:
$ s3k -a ghcid-foo-bar
EOF
}

function findJqOrDie() {
  local _jq=''
  if [ -x "${S3K_PATH_JQ}" ]; then
    _jq="${S3K_PATH_JQ}"
  elif command -v 'jq' &>/dev/null; then
    _jq='jq'
  else
    echo "s3k: 'jq' binary not found on runtime path or S3K_PATH_JQ" >&2
    exit 1
  fi

  echo "${_jq}"
}

function findStackOrDie() {
  local _stack=''
  if [ -x "${S3K_PATH_STACK}" ]; then
    _stack="${S3K_PATH_STACK}"
  elif command -v 'stack' &>/dev/null; then
    _stack='stack'
  else
    echo "s3k: 'stack' binary not found on runtime path or S3K_PATH_STACK" >&2
    exit 1
  fi

  echo "${_stack}"
}

function parseArgs() {
  local _jq="$1"
  shift 1

  local OPTARG
  local OPTIND
  local _opt

  local _execute='true'
  local _fullBuildTargetRegex=''
  local _buildTargetRegex=''
  local _testTargetRegex=''
  local _testArgs=''
  local _runTargetRegex=''
  local _runArgs=''
  local _ghciTargetRegex=''
  local _ghciArgs=''
  local _haddockTargetRegex=''
  local _haddockArgs=''
  local _benchTargetRegex=''
  local _benchArgs=''
  local _loadAliases=()
  local _saveAlias=''
  local _saveGlobalAlias=''
  local _deleteAlias=''
  local _deleteGlobalAlias=''
  local _listAliases='false'
  local _listAliasesIncludingGlobals='false'
  local _envVars=()
  local _buildWithPedanticFlag='true'
  local _arbitraryCommand=''
  local _printConfigFilePath='false'
  local _regenProjectCache='false'
  local _printVersion='false'
  local _showUsage='false'
  local _showDetailedUsage='false'

  while getopts pb:B:t:T:r:R:g:G:k:K:m:M:a:s:S:d:D:lLe:Wx:cCVhH _opt; do
    case "${_opt}" in
      p)
        _execute='false';;
      b)
        _fullBuildTargetRegex="${OPTARG}";;
      B)
        _buildTargetRegex="${OPTARG}";;
      t)
        _testTargetRegex="${OPTARG}";;
      T)
        _testArgs="${OPTARG}";;
      r)
        _runTargetRegex="${OPTARG}";;
      R)
        _runArgs="${OPTARG}";;
      g)
        _ghciTargetRegex="${OPTARG}";;
      G)
        _ghciArgs="${OPTARG}";;
      k)
        _haddockTargetRegex="${OPTARG}";;
      K)
        _haddockArgs="${OPTARG}";;
      m)
        _benchTargetRegex="${OPTARG}";;
      M)
        _benchArgs="${OPTARG}";;
      a)
        _loadAliases+=("${OPTARG}");;
      s)
        _saveAlias="${OPTARG}";;
      S)
        _saveGlobalAlias="${OPTARG}";;
      d)
        _deleteAlias="${OPTARG}";;
      D)
        _deleteGlobalAlias="${OPTARG}";;
      l)
        _listAliases='true';;
      L)
        _listAliasesIncludingGlobals='true';;
      e)
        _envVars+=("${OPTARG}");;
      W)
        _buildWithPedanticFlag='false';;
      x)
        _arbitraryCommand="${OPTARG}";;
      c)
        _printConfigFilePath='true';;
      C)
        _regenProjectCache='true';;
      V)
        _printVersion='true';;
      h)
        _showUsage='true';;
      H)
        _showDetailedUsage='true';;
      \?)
        usage >&2
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ -z "${_testTargetRegex}" ] && [ -n "${_testArgs}" ]; then
    _testArgs=''
  fi

  if [ -z "${_runTargetRegex}" ] && [ -n "${_runArgs}" ]; then
    _runArgs=''
  fi

  if [ -z "${_ghciTargetRegex}" ] && [ -n "${_ghciArgs}" ]; then
    _ghciArgs=''
  fi

  if [ -z "${_haddockTargetRegex}" ] && [ -n "${_haddockArgs}" ]; then
    _haddockArgs=''
  fi

  if [ -z "${_benchTargetRegex}" ] && [ -n "${_benchArgs}" ]; then
    _benchArgs=''
  fi

  local _loadAliasesJSON='[]'
  if [ "${#_loadAliases[@]}" -gt 0 ]; then
    _loadAliasesJSON=$( \
      printf '%s\n' "${_loadAliases[@]}" | "${_jq}" -nR \
       '[ inputs
        | select(test("^\\s*$") | not)
        ]'
    )
  fi

  local _envVarsJSON='[]'
  if [ "${#_envVars[@]}" -gt 0 ]; then
    _envVarsJSON=$( \
      printf '%s\n' "${_envVars[@]}" | "${_jq}" -nR \
        '[ inputs
         | split("=")
         | { key: .[0]
           , value: .[1:] | join("")
           }
         | select(
             (.key | test("^[A-Za-z][A-Za-z0-9_]*$")) and (.value | length > 0)
           )
         ]'
    )
  fi

  local _stackArgsJSON='[]'
  if [ "$#" -gt 0 ]; then
    _stackArgsJSON=$( \
      printf '%s\n' "$@" | "${_jq}" -nR \
       '[ inputs
        | select(test("^\\s*$") | not)
        ]'
    )
  fi

  "${_jq}" -nS \
    --argjson execute "${_execute}"  \
    --arg fullBuildTargetRegex "${_fullBuildTargetRegex}" \
    --arg buildTargetRegex "${_buildTargetRegex}" \
    --arg testTargetRegex "${_testTargetRegex}" \
    --arg testArgs "${_testArgs}" \
    --arg runTargetRegex "${_runTargetRegex}" \
    --arg runArgs "${_runArgs}" \
    --arg ghciTargetRegex "${_ghciTargetRegex}" \
    --arg ghciArgs "${_ghciArgs}" \
    --arg haddockTargetRegex "${_haddockTargetRegex}" \
    --arg haddockArgs "${_haddockArgs}" \
    --arg benchTargetRegex "${_benchTargetRegex}" \
    --arg benchArgs "${_benchArgs}" \
    --argjson loadAliases "${_loadAliasesJSON}" \
    --arg saveAlias "${_saveAlias}" \
    --arg saveGlobalAlias "${_saveGlobalAlias}" \
    --arg deleteAlias "${_deleteAlias}" \
    --arg deleteGlobalAlias "${_deleteGlobalAlias}" \
    --argjson listAliases "${_listAliases}" \
    --argjson listAliasesIncludingGlobals "${_listAliasesIncludingGlobals}" \
    --argjson envVars "${_envVarsJSON}" \
    --argjson buildWithPedanticFlag "${_buildWithPedanticFlag}" \
    --arg arbitraryCommand "${_arbitraryCommand}" \
    --argjson printConfigFilePath "${_printConfigFilePath}" \
    --argjson regenProjectCache "${_regenProjectCache}" \
    --argjson printVersion "${_printVersion}" \
    --argjson showUsage "${_showUsage}" \
    --argjson showDetailedUsage "${_showDetailedUsage}" \
    --argjson stackArgs "${_stackArgsJSON}" '
      def nullIfEmptyString: if . == "" then null else . end;
      def emptyArrayIfEmptyString: if . == "" then [] else [.] end;
      {
        execute: $execute,
        fullBuildTargetRegex: ($fullBuildTargetRegex | emptyArrayIfEmptyString),
        buildTargetRegex: ($buildTargetRegex | emptyArrayIfEmptyString),
        testTargetRegex: ($testTargetRegex | emptyArrayIfEmptyString),
        testArgs: ($testArgs | emptyArrayIfEmptyString),
        runTargetRegex: ($runTargetRegex | emptyArrayIfEmptyString),
        runArgs: ($runArgs | emptyArrayIfEmptyString),
        ghciTargetRegex: ($ghciTargetRegex | emptyArrayIfEmptyString),
        ghciArgs: ($ghciArgs | emptyArrayIfEmptyString),
        haddockTargetRegex: ($haddockTargetRegex | emptyArrayIfEmptyString),
        haddockArgs: ($haddockArgs | emptyArrayIfEmptyString),
        benchTargetRegex: ($benchTargetRegex | emptyArrayIfEmptyString),
        benchArgs: ($benchArgs | emptyArrayIfEmptyString),
        loadAliases: $loadAliases,
        saveAlias: ($saveAlias | nullIfEmptyString),
        saveGlobalAlias: ($saveGlobalAlias | nullIfEmptyString),
        deleteAlias: ($deleteAlias | nullIfEmptyString),
        deleteGlobalAlias: ($deleteGlobalAlias | nullIfEmptyString),
        listAliases: $listAliases,
        listAliasesIncludingGlobals: $listAliasesIncludingGlobals,
        envVars: $envVars,
        buildWithPedanticFlag: $buildWithPedanticFlag,
        arbitraryCommand: ($arbitraryCommand | emptyArrayIfEmptyString),
        printConfigFilePath: $printConfigFilePath,
        regenProjectCache: $regenProjectCache,
        printVersion: $printVersion,
        showUsage: $showUsage,
        showDetailedUsage: $showDetailedUsage,
        stackArgs: $stackArgs
      }'
}

function shouldShowUsage() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.showUsage' > /dev/null <<< "${_opts}"
}

function showUsage() {
  usage
  exit 0
}

function shouldShowDetailedUsage() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.showDetailedUsage' > /dev/null <<< "${_opts}"
}

function showDetailedUsage() {
  detailedUsage
  exit 0
}

function shouldPrintConfigFilePath() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.printConfigFilePath' > /dev/null <<< "${_opts}"
}

function printConfigFilePath() {
  local _jq="$1"

  findConfigFile "${_jq}"
  exit 0
}

function shouldPrintVersion() {
  local _jq="$1"
  local _opts="$2"

  "${_jq}" -e '.printVersion' > /dev/null <<< "${_opts}"
}

function printVersion() {
  echo "${version}"
  exit 0
}

function findConfigFile() {
  local _jq="$1"

  local _configHome=''
  if [ -f "${S3K_CONFIG_HOME}" ]; then
    _configHome="${S3K_CONFIG_HOME}"
  elif [ -d "${XDG_CONFIG_HOME}" ]; then
    _configHome="${XDG_CONFIG_HOME}/s3k"
  elif [ -d "${HOME}" ]; then
    _configHome="${HOME}/.s3k"
  else
    echo "s3k: Unable to find config dir. You can specify a dir via S3K_CONFIG_HOME." >&2
    exit 1
  fi

  mkdir -p "${_configHome}"

  local _configFile
  _configFile="${_configHome}/config.json"

  if [ ! -f "${_configFile}" ]; then
    "${_jq}" -S '.createdAt |= (now | todateiso8601)' \
      <<< '{"createdAt": null, "globalAliases": {}, "projects": {}}' \
      > "${_configFile}"
  fi

  echo "${_configFile}"
}

function addProjectToConfigFile() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"

  local _cacheDirName=''

  local _tempFile="${tempDir}/config.json.temp"
  cp "${_configFile}" "${_tempFile}"

  if ! "${_jq}" -e --arg projKey "${_projRoot}" '.projects | has($projKey)' \
    > /dev/null < "${_tempFile}"; then

    if command -v 'md5sum' &> /dev/null; then
      _cacheDirName="$(echo "${_projRoot}" | tr -d '\n' | md5sum | cut -d ' ' -f1)"
    elif command -v 'md5' &> /dev/null; then
      # The 'cut' is probably unnecessary when using 'md5' in this way, but it
      # doesn't hurt. ¯\_(ツ)_/¯
      _cacheDirName="$(echo "${_projRoot}" | tr -d '\n' | md5 | cut -d ' ' -f1)"
    else
      echo "s3k: Could not find 'md5sum' or 'md5'" >&2
      exit 1
    fi

    "${_jq}" -S --arg projKey "${_projRoot}" --arg cacheDirName "${_cacheDirName}" '
      .projects += {
        ($projKey): {
          "aliases": {},
          "cacheDirName": $cacheDirName
        }
      }' > "${_configFile}" < "${_tempFile}"
  fi
}

function findCacheDir() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"

  local _cacheDirName
  _cacheDirName=$(
    "${_jq}" -re --arg projRoot "${_projRoot}" \
      '.projects[$projRoot].cacheDirName' \
      < "${_configFile}" \
  )

  local _cacheDir
  _cacheDir="$(dirname "${_configFile}")/cache/${_cacheDirName}"

  mkdir -p "${_cacheDir}"
  echo "${_cacheDir}"
}

shouldRegenProjectCache() {
  local _jq="$1"
  local _opts="$2"
  local _cacheDir="$3"

  if [ -z "$(ls -A "${_cacheDir}")" ]; then
    true
  else
    "${_jq}" -e '.regenProjectCache' > /dev/null <<< "${_opts}"
  fi
}

function regenProjectCache() {
  local _jq="$1"
  local _cacheDir="$2"

  stack ide packages --stdout \
    | sort \
    > "${_cacheDir}/build-targets"

  stack ide targets --stdout \
    | awk -F ':' '($2 == "test"){print $1}' \
    | sort -u \
    > "${_cacheDir}/test-targets"

  stack ide targets --stdout \
    | awk -F ':' '($2 == "bench"){print $1}' \
    | sort -u \
    > "${_cacheDir}/bench-targets"

  stack ide targets --stdout \
    | awk -F ':' '($2 == "exe"){print $3}' \
    | sort \
    > "${_cacheDir}/run-targets"

  stack ide targets --stdout \
    | sort \
    > "${_cacheDir}/ghci-targets"
}

function loadAliases() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"
  local _opts="$4"

  local _mergedAlias=''
  _mergedAlias=$("${_jq}" -nS '{
    fullBuildTargetRegex: [],
    buildTargetRegex: [],
    testTargetRegex: [],
    testArgs: [],
    runTargetRegex: [],
    runArgs: [],
    ghciTargetRegex: [],
    ghciArgs: [],
    haddockTargetRegex: [],
    haddockArgs: [],
    benchTargetRegex: [],
    benchArgs: [],
    envVars: [],
    arbitraryCommand: [],
    stackArgs: []
  }')

  local _aliasName=''

  local _line=''
  while IFS='' read -r _line; do
    _aliasName="${_line}"
    _alias=$(
      "${_jq}" -S \
        --arg projRoot "${_projRoot}" \
        --arg aliasName "${_aliasName}" '
          .projects[$projRoot].aliases[$aliasName] // .globalAliases[$aliasName] // empty
        ' < "${_configFile}" \
    )

    if [ -z "${_alias}" ]; then
      echo "s3k: Alias \"${_aliasName}\" does not exist" >&2
      exit 1
    fi

    _mergedAlias=$("${_jq}" -n '
      {
        fullBuildTargetRegex: ($ARGS.positional[0].fullBuildTargetRegex + $ARGS.positional[1].fullBuildTargetRegex),
        buildTargetRegex: ($ARGS.positional[0].buildTargetRegex + $ARGS.positional[1].buildTargetRegex),
        testTargetRegex: ($ARGS.positional[0].testTargetRegex + $ARGS.positional[1].testTargetRegex),
        testArgs: ($ARGS.positional[0].testArgs + $ARGS.positional[1].testArgs),
        runTargetRegex: ($ARGS.positional[0].runTargetRegex + $ARGS.positional[1].runTargetRegex),
        runArgs: ($ARGS.positional[0].runArgs + $ARGS.positional[1].runArgs),
        ghciTargetRegex: ($ARGS.positional[0].ghciTargetRegex + $ARGS.positional[1].ghciTargetRegex),
        ghciArgs: ($ARGS.positional[0].ghciArgs + $ARGS.positional[1].ghciArgs),
        haddockTargetRegex: ($ARGS.positional[0].haddockTargetRegex + $ARGS.positional[1].haddockTargetRegex),
        haddockArgs: ($ARGS.positional[0].haddockArgs + $ARGS.positional[1].haddockArgs),
        benchTargetRegex: ($ARGS.positional[0].benchTargetRegex + $ARGS.positional[1].benchTargetRegex),
        benchArgs: ($ARGS.positional[0].benchArgs + $ARGS.positional[1].benchArgs),
        envVars: ($ARGS.positional[0].envVars + $ARGS.positional[1].envVars),
        arbitraryCommand: ($ARGS.positional[0].arbitraryCommand + $ARGS.positional[1].arbitraryCommand),
        stackArgs: ($ARGS.positional[0].stackArgs + $ARGS.positional[1].stackArgs)
      }' --jsonargs "${_mergedAlias}" "${_alias}")
  done < <("${_jq}" -r '.loadAliases[]' <<< "${_opts}")

  echo "${_mergedAlias}"
}

function mergeAliasWithOpts() {
  local _jq="$1"
  local _opts="$2"
  local _alias="$3"

  "${_jq}" -n '
    {
      execute:$ARGS.positional[0].execute,
      fullBuildTargetRegex: ($ARGS.positional[0].fullBuildTargetRegex + $ARGS.positional[1].fullBuildTargetRegex) | unique,
      buildTargetRegex: ($ARGS.positional[0].buildTargetRegex + $ARGS.positional[1].buildTargetRegex) | unique,
      testTargetRegex: ($ARGS.positional[0].testTargetRegex + $ARGS.positional[1].testTargetRegex) | unique,
      testArgs: ($ARGS.positional[0].testArgs + $ARGS.positional[1].testArgs),
      runTargetRegex: ($ARGS.positional[0].runTargetRegex + $ARGS.positional[1].runTargetRegex) | unique,
      runArgs: ($ARGS.positional[0].runArgs + $ARGS.positional[1].runArgs),
      ghciTargetRegex: ($ARGS.positional[0].ghciTargetRegex + $ARGS.positional[1].ghciTargetRegex) | unique,
      ghciArgs: ($ARGS.positional[0].ghciArgs + $ARGS.positional[1].ghciArgs),
      haddockTargetRegex: ($ARGS.positional[0].haddockTargetRegex + $ARGS.positional[1].haddockTargetRegex) | unique,
      haddockArgs: ($ARGS.positional[0].haddockArgs + $ARGS.positional[1].haddockArgs),
      benchTargetRegex: ($ARGS.positional[0].benchTargetRegex + $ARGS.positional[1].benchTargetRegex) | unique,
      benchArgs: ($ARGS.positional[0].benchArgs + $ARGS.positional[1].benchArgs),
      loadAliases: $ARGS.positional[0].loadAliases,
      saveAlias: $ARGS.positional[0].saveAlias,
      saveGlobalAlias: $ARGS.positional[0].saveGlobalAlias,
      deleteAlias: $ARGS.positional[0].deleteAlias,
      deleteGlobalAlias: $ARGS.positional[0].deleteGlobalAlias,
      listAliases: $ARGS.positional[0].listAliases,
      listAliasesIncludingGlobals: $ARGS.positional[0].listAliasesIncludingGlobals,
      envVars: ($ARGS.positional[0].envVars + $ARGS.positional[1].envVars) | unique,
      buildWithPedanticFlag: $ARGS.positional[0].buildWithPedanticFlag,
      arbitraryCommand: ($ARGS.positional[0].arbitraryCommand + $ARGS.positional[1].arbitraryCommand),
      regenProjectCache: $ARGS.positional[0].regenProjectCache,
      printVersion: $ARGS.positional[0].printVersion,
      showUsage: $ARGS.positional[0].showUsage,
      showDetailedUsage: $ARGS.positional[0].showDetailedUsage,
      stackArgs: ($ARGS.positional[0].stackArgs + $ARGS.positional[1].stackArgs)
    }' --jsonargs "${_opts}" "${_alias}"
}

function saveAlias() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"
  local _opts="$4"

  local _aliasName=''
  _aliasName="$("${_jq}" -r '.saveAlias // empty' <<< "${_opts}")"

  local _globalAliasName=''
  _globalAliasName="$("${_jq}" -r '.saveGlobalAlias // empty' <<< "${_opts}")"

  local _tempFile="${tempDir}/config.json.temp"

  local _alias=''

  if [ -n "${_aliasName}" ]; then
    _alias=$(
      "${_jq}" \
        '{
           fullBuildTargetRegex,
           buildTargetRegex,
           testTargetRegex,
           testArgs,
           runTargetRegex,
           runArgs,
           ghciTargetRegex,
           ghciArgs,
           haddockTargetRegex,
           haddockArgs,
           benchTargetRegex,
           benchArgs,
           envVars,
           arbitraryCommand,
           stackArgs
         }' <<< "${_opts}"
    )

    cp "${_configFile}" "${_tempFile}"
    "${_jq}" -S \
      --arg projRoot "${_projRoot}" \
      --arg aliasName "${_aliasName}" \
      --argjson alias "${_alias}" '
        .projects[$projRoot].aliases[$aliasName] |= $alias
      ' > "${_configFile}" < "${_tempFile}"
  fi

  if [ -n "${_globalAliasName}" ]; then
    _alias=$(
      "${_jq}" \
        '{
           fullBuildTargetRegex,
           buildTargetRegex,
           testTargetRegex,
           testArgs,
           runTargetRegex,
           runArgs,
           ghciTargetRegex,
           ghciArgs,
           haddockTargetRegex,
           haddockArgs,
           benchTargetRegex,
           benchArgs,
           envVars,
           arbitraryCommand,
           stackArgs
         }' <<< "${_opts}"
    )

    cp "${_configFile}" "${_tempFile}"
    "${_jq}" -S \
      --arg globalAliasName "${_globalAliasName}" \
      --argjson alias "${_alias}" '
        .globalAliases[$globalAliasName] |= $alias
      ' > "${_configFile}" < "${_tempFile}"
  fi
}

function deleteAlias() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"
  local _opts="$4"

  local _aliasName=''
  _aliasName="$("${_jq}" -r '.deleteAlias // empty' <<< "${_opts}")"

  local _globalAliasName=''
  _globalAliasName="$("${_jq}" -r '.deleteGlobalAlias // empty' <<< "${_opts}")"

  local _tempFile="${tempDir}/config.json.temp"

  # N.B. We could check if the aliases do not exist in the user's config fileand
  # either warn/error out, but instead we opt to just try to delete them if they
  # exist. If they don't exist, the user's config file will not be modified
  # thanks to jq's 'del' function playing very nicely.

  if [ -n "${_aliasName}" ]; then
    cp "${_configFile}" "${_tempFile}"
    "${_jq}" -S \
      --arg projRoot "${_projRoot}" \
      --arg aliasName "${_aliasName}" '
        del(.projects[$projRoot].aliases[$aliasName])
      ' > "${_configFile}" < "${_tempFile}"
  fi

  if [ -n "${_globalAliasName}" ]; then
    cp "${_configFile}" "${_tempFile}"
    "${_jq}" -S \
      --arg globalAliasName "${_globalAliasName}" '
        del(.globalAliases[$globalAliasName])
      ' > "${_configFile}" < "${_tempFile}"
  fi
}

function listAliases() {
  local _jq="$1"
  local _configFile="$2"
  local _projRoot="$3"
  local _opts="$4"

  local _shouldListAliasesIncludingGlobals=''
  _shouldListAliasesIncludingGlobals="$("${_jq}" -r '.listAliasesIncludingGlobals // empty' <<< "${_opts}")"

  if [ -n "${_shouldListAliasesIncludingGlobals}" ]; then
    "${_jq}" -r \
      --arg projRoot "${_projRoot}" '
        (.projects[$projRoot].aliases | keys) + (.globalAliases | keys) | .[]
      ' < "${_configFile}" | sort -u
    exit 0
  fi

  local _shouldListProjectAliases=''
  _shouldListProjectAliases="$("${_jq}" -r '.listAliases // empty' <<< "${_opts}")"

  if [ -n "${_shouldListProjectAliases}" ]; then
    "${_jq}" -r \
      --arg projRoot "${_projRoot}" '
        .projects[$projRoot].aliases | keys | .[]
      ' < "${_configFile}" | sort -u
    exit 0
  fi
}

function processCommandList() {
  local _jq="$1"
  local _opts="$2"
  local _cacheDir="$3"

  local _finalCommand=()
  local _line

  local _buildWithPedanticFlag=''
  _buildWithPedanticFlag=$(
    "${_jq}" '.buildWithPedanticFlag // empty' <<< "${_opts}"
  )

  local _stackArgs=()
  while IFS='' read -r _line; do
    _stackArgs+=("${_line}")
  done < <("${_jq}" -r '.stackArgs[]' <<< "${_opts}")

  local _buildCommand=('stack' 'build')

  if [ -n "${_buildWithPedanticFlag}" ]; then
    _buildCommand+=('--pedantic')
  fi

  local _buildTargets=()
  local _buildTargetRegex=()
  while IFS='' read -r _line; do
    _buildTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.buildTargetRegex[]' <<< "${_opts}")
  if [ "${#_buildTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _buildTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_buildTargetRegex[@]}") "${_cacheDir}/build-targets"
    )

    if [ "${#_buildTargets[@]}" -gt 0 ]; then
      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_buildCommand[@]}" "${_stackArgs[@]}" "${_buildTargets[@]}")
      else
        _finalCommand+=("${_buildCommand[@]}" "${_buildTargets[@]}")
      fi
    fi
  fi
  local _fullBuildCommand=(
    'stack' 'build' '--test' '--no-run-tests' '--bench' '--no-run-benchmarks'
  )
  if [ -n "${_buildWithPedanticFlag}" ]; then
    _fullBuildCommand+=('--pedantic')
  fi
  local _fullBuildTargets=()
  local _fullBuildTargetRegex=()
  while IFS='' read -r _line; do
    _fullBuildTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.fullBuildTargetRegex[]' <<< "${_opts}")

  if [ "${#_fullBuildTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _fullBuildTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_fullBuildTargetRegex[@]}") "${_cacheDir}/build-targets"
    )

    if [ "${#_fullBuildTargets[@]}" -gt 0 ]; then
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_fullBuildCommand[@]}" "${_stackArgs[@]}" "${_fullBuildTargets[@]}")
      else
        _finalCommand+=("${_fullBuildCommand[@]}" "${_fullBuildTargets[@]}")
      fi
    fi
  fi

  local _testCommand=('stack' 'test')
  if [ -n "${_buildWithPedanticFlag}" ]; then
    _testCommand+=('--pedantic')
  fi
  local _testArgs=''
  _testArgs=$("${_jq}" -r '.testArgs | if . == [] then empty else join (" ") | @sh end' <<< "${_opts}")
  if [ -n "${_testArgs}" ]; then
    _testCommand+=('--test-arguments' "${_testArgs}")
  fi
  local _testTargets=()
  local _testTargetRegex=()
  while IFS='' read -r _line; do
    _testTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.testTargetRegex[]' <<< "${_opts}")

  if [ "${#_testTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _testTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_testTargetRegex[@]}") "${_cacheDir}/test-targets"
    )

    if [ "${#_testTargets[@]}" -gt 0 ]; then
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_testCommand[@]}" "${_stackArgs[@]}" "${_testTargets[@]}")
      else
        _finalCommand+=("${_testCommand[@]}" "${_testTargets[@]}")
      fi
    fi
  fi

  local _haddockCommand=('stack' 'haddock')
  if [ -n "${_buildWithPedanticFlag}" ]; then
    _haddockCommand+=('--pedantic')
  fi
  local _haddockArgs=''
  _haddockArgs=$("${_jq}" -r '.haddockArgs | if . == [] then empty else join (" ") | @sh end' <<< "${_opts}")
  if [ -n "${_haddockArgs}" ]; then
    _haddockCommand+=('--haddock-arguments' "${_haddockArgs}")
  fi
  local _haddockTargets=()
  local _haddockTargetRegex=()
  while IFS='' read -r _line; do
    _haddockTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.haddockTargetRegex[]' <<< "${_opts}")

  if [ "${#_haddockTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _haddockTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_haddockTargetRegex[@]}") "${_cacheDir}/build-targets"
    )

    if [ "${#_haddockTargets[@]}" -gt 0 ]; then
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_haddockCommand[@]}" "${_stackArgs[@]}" "${_haddockTargets[@]}")
      else
        _finalCommand+=("${_haddockCommand[@]}" "${_haddockTargets[@]}")
      fi
    fi
  fi

  local _benchCommand=('stack' 'bench')
  if [ -n "${_buildWithPedanticFlag}" ]; then
    _benchCommand+=('--pedantic')
  fi
  local _benchArgs=''
  _benchArgs=$("${_jq}" -r '.benchArgs | if . == [] then empty else join (" ") | @sh end' <<< "${_opts}")
  if [ -n "${_benchArgs}" ]; then
    _benchCommand+=('--benchmark-arguments' "${_benchArgs}")
  fi
  local _benchTargets=()
  local _benchTargetRegex=()
  while IFS='' read -r _line; do
    _benchTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.benchTargetRegex[]' <<< "${_opts}")

  if [ "${#_benchTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _benchTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_benchTargetRegex[@]}") "${_cacheDir}/bench-targets"
    )

    if [ "${#_benchTargets[@]}" -gt 0 ]; then
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_benchCommand[@]}" "${_stackArgs[@]}" "${_benchTargets[@]}")
      else
        _finalCommand+=("${_benchCommand[@]}" "${_benchTargets[@]}")
      fi
    fi
  fi

  local _runCommand=('stack' 'run')
  local _runArgs=''
  _runArgs=$("${_jq}" -r '.runArgs | if . == [] then empty else join (" ") end' <<< "${_opts}")
  local _runTarget=''
  local _runTargetRegex=()
  while IFS='' read -r _line; do
    _runTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.runTargetRegex[]' <<< "${_opts}")
  if [ "${#_runTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _runTarget="${_line}"
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_runCommand[@]}" "${_stackArgs[@]}" "${_runTarget}")
      else
        _finalCommand+=("${_runCommand[@]}" "${_runTarget}")
      fi

      if [ -n "${_runArgs}" ]; then
        _finalCommand+=('--' "${_runArgs[@]}")
      fi
    done < <( \
      grep -Ef <(printf '%s\n' "${_runTargetRegex[@]}") "${_cacheDir}/run-targets"
    )
  fi

  local _ghciCommand=('stack' 'ghci')
  local _ghciArgs=''
  _ghciArgs=$("${_jq}" -r '.ghciArgs | if . == [] then empty else join (" ") | @sh end' <<< "${_opts}")
  if [ -n "${_ghciArgs}" ]; then
    _ghciCommand+=('--ghci-options' "${_ghciArgs}")
  fi
  local _ghciTargets=()
  local _ghciTargetRegex=()
  while IFS='' read -r _line; do
    _ghciTargetRegex+=("${_line}")
  done < <("${_jq}" -r '.ghciTargetRegex[]' <<< "${_opts}")

  if [ "${#_ghciTargetRegex[@]}" -gt 0 ]; then
    while IFS='' read -r _line; do
      _ghciTargets+=("${_line}")
    done < <( \
      grep -Ef <(printf '%s\n' "${_ghciTargetRegex[@]}") "${_cacheDir}/ghci-targets"
    )

    if [ "${#_ghciTargets[@]}" -gt 0 ]; then
      if [ "${#_finalCommand[@]}" -gt 0 ]; then
        _finalCommand+=('&&')
      fi

      if [ "${#_stackArgs[@]}" -gt 0 ]; then
        _finalCommand+=("${_ghciCommand[@]}" "${_stackArgs[@]}" "${_ghciTargets[@]}")
      else
        _finalCommand+=("${_ghciCommand[@]}" "${_ghciTargets[@]}")
      fi
    fi
  fi

  local _arbitraryCommand=''
  while IFS='' read -r _line; do
    _arbitraryCommand="${_line}"
    if [ "${#_finalCommand[@]}" -gt 0 ]; then
      _finalCommand+=('&&')
    fi
    _finalCommand+=("${_arbitraryCommand}")
  done < <("${_jq}" -r '.arbitraryCommand[]' <<< "${_opts}")

  local _envVars=()
  while IFS='' read -r _line; do
    _envVars+=("${_line}")
  done < <("${_jq}" -r '.envVars[] | "export \(.key)=\(.value | @sh);"' <<< "${_opts}")
  if [ "${#_envVars[@]}" -gt 0 ]; then
    _finalCommand=('(' "${_envVars[@]}" "${_finalCommand[@]}" ')')
  fi

  if [ "${#_finalCommand[@]}" -eq 0 ]; then
    if [ "${#_stackArgs[@]}" -gt 0 ]; then
      _finalCommand+=('stack' "${_stackArgs[@]}")
    fi
  fi

  if [ "${#_finalCommand[@]}" -gt 0 ]; then
    if "${_jq}" -e '.execute' > /dev/null <<< "${_opts}"; then
      eval "${_finalCommand[*]}"
    else
      echo "${_finalCommand[*]}"
    fi
  fi
}

function main() {
  local _jq
  _jq="$(findJqOrDie)"

  local _stack
  _stack="$(findStackOrDie)"

  local _projRoot
  _projRoot="$("${_stack}" path --project-root 2>/dev/null)"

  local _opts
  _opts="$(parseArgs "${_jq}" "$@")"

  shouldShowDetailedUsage "${_jq}" "${_opts}" \
    && showDetailedUsage
  shouldShowUsage "${_jq}" "${_opts}" \
    && showUsage
  shouldPrintVersion "${_jq}" "${_opts}" \
    && printVersion
  shouldPrintConfigFilePath "${_jq}" "${_opts}" \
    && printConfigFilePath "${_jq}"

  local _configFile
  _configFile="$(findConfigFile "${_jq}")"

  addProjectToConfigFile "${_jq}" "${_configFile}" "${_projRoot}"

  listAliases "${_jq}" "${_configFile}" "${_projRoot}" "${_opts}"

  local _cacheDir
  _cacheDir=$(findCacheDir "${_jq}" "${_configFile}" "${_projRoot}")

  shouldRegenProjectCache "${_jq}" "${_opts}" "${_cacheDir}" \
    && regenProjectCache "${_jq}" "${_cacheDir}"

  local _mergedAlias=''
  _mergedAlias="$(loadAliases "${_jq}" "${_configFile}" "${_projRoot}" "${_opts}")"

  local _augmentedOpts=''
  _augmentedOpts="$(mergeAliasWithOpts "${_jq}" "${_opts}" "${_mergedAlias}")"

  saveAlias "${_jq}" "${_configFile}" "${_projRoot}" "${_augmentedOpts}"
  deleteAlias "${_jq}" "${_configFile}" "${_projRoot}" "${_augmentedOpts}"

  processCommandList "${_jq}" "${_augmentedOpts}" "${_cacheDir}"
}

main "$@"
